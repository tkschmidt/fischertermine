name: Update Exam Data

on:
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC every day
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  pull-requests: write

jobs:
  update-data:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.changes.outputs.changes }}
      freising_available: ${{ steps.changes.outputs.freising_available }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: go mod download

    - name: Make scripts executable
      run: chmod +x scripts/generate-diff.sh

    - name: Run scraper and check for changes
      id: changes
      run: |
        # Create data directory
        mkdir -p data

        # Generate current data
        go run main.go > current-data.json

        # Get current date
        DATE=$(date '+%Y-%m-%d')

        # Calculate MD5 of new data
        NEW_MD5=$(md5sum current-data.json | cut -d' ' -f1)

        # Check if latest.json exists and compare MD5
        if [ -f "data/latest.json" ]; then
          OLD_MD5=$(md5sum data/latest.json | cut -d' ' -f1)
          echo "Old MD5: $OLD_MD5"
          echo "New MD5: $NEW_MD5"
          if [ "$NEW_MD5" = "$OLD_MD5" ]; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
            exit 0
          fi
          # Generate semantic diff using our script
          ./scripts/generate-diff.sh data/latest.json current-data.json > diff-output.txt
          {
            echo "DIFF<<EOF"
            cat diff-output.txt
            echo "EOF"
          } >> $GITHUB_OUTPUT
        else
          echo "DIFF<<EOF" >> $GITHUB_OUTPUT
          echo "ðŸ“Š Initial data load - no previous version to compare"
          echo ""
          echo "This is the first time exam data is being added to the repository."
          echo "EOF" >> $GITHUB_OUTPUT
        fi

        # Changes detected or no previous data
        echo "changes=true" >> $GITHUB_OUTPUT

        # Create dated filename
        FILENAME="exam-data-${DATE}.json"

        # If file with same date exists, add timestamp
        if [ -f "data/$FILENAME" ]; then
          FILENAME="exam-data-${DATE}-$(date '+%H%M').json"
        fi

        # Save with dated filename in data folder
        cp current-data.json "data/$FILENAME"

        # Update/create latest.json symlink in data folder
        cd data
        rm -f latest.json
        ln -s "$FILENAME" latest.json
        cd ..

        echo "filename=data/$FILENAME" >> $GITHUB_OUTPUT
        if [ ! -f "data/latest.json" ]; then
          echo "message=Initial exam data" >> $GITHUB_OUTPUT
        else
          echo "message=Updated exam data ($DATE)" >> $GITHUB_OUTPUT
        fi

        # Check for available appointments in Freising
        FREISING_AVAILABLE=$(jq -r '.[0].exam_appointments[] | select(.city | test("Freising"; "i")) | select(.status | test("Frei"; "i")) | .date_time' current-data.json | wc -l)
        echo "freising_available=$FREISING_AVAILABLE" >> $GITHUB_OUTPUT

    - name: Create Pull Request
      if: steps.changes.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        commit-message: "${{ steps.changes.outputs.message }}"
        title: "Update exam data - ${{ steps.changes.outputs.message }}"
        assignees: tkschmidt
        body: |
          ðŸŽ£ **Fishing Exam Data Update**

          This PR contains updated examination dates from the Bavarian fishing exam website.

          **Changes:**
          - New file: `${{ steps.changes.outputs.filename }}`
          - Updated symlink: `data/latest.json`
          - Generated at: ${{ github.run_id }}

          **Diff:**
          ```diff
          ${{ steps.changes.outputs.DIFF }}
          ```

          Please review the changes before merging.
        branch: update-exam-data-${{ github.run_number }}
        delete-branch: true

    - name: Cleanup temp files
      if: always()
      run: rm -f current-data.json diff-output.txt

  notify:
    runs-on: ubuntu-latest
    needs: update-data
    if: needs.update-data.outputs.changes == 'true' && needs.update-data.outputs.freising_available > 0

    steps:
    - name: Send Pushover notification
      uses: desiderati/github-action-pushover@v1
      with:
        job-status: success
        pushover-api-token: ${{ secrets.PUSHOVER_API_TOKEN }}
        pushover-user-key: ${{ secrets.PUSHOVER_USER_KEY }}
        pushover-title: "ðŸŽ£ Freising Exam Available!"
        pushover-message: "Good news! There are ${{ needs.update-data.outputs.freising_available }} available exam slot(s) in Freising. Check the data for appointment details."
